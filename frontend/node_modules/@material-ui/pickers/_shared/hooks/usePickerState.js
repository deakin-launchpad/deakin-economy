"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = require("react");
var useUtils_1 = require("./useUtils");
var text_field_helper_1 = require("../../_helpers/text-field-helper");
var react_2 = require("react");
var valueToDate = function (utils, _a) {
    var value = _a.value, initialFocusedDate = _a.initialFocusedDate;
    var initialDate = value || initialFocusedDate || utils.date();
    var date = utils.date(initialDate);
    return date && utils.isValid(date) ? date : utils.date();
};
function useDateValues(props, options) {
    var utils = useUtils_1.useUtils();
    var date = valueToDate(utils, props);
    var acceptedDateRef = react_2.useRef(date);
    var format = props.format || options.getDefaultFormat();
    return { acceptedDateRef: acceptedDateRef, date: date, format: format };
}
function makeControlledOpenProps(props) {
    return {
        isOpen: props.open,
        setIsOpen: function (newIsOpen) {
            return newIsOpen ? props.onOpen && props.onOpen() : props.onClose && props.onClose();
        },
    };
}
/* eslint-disable react-hooks/rules-of-hooks */
function useOpenState(props) {
    if (props.open !== undefined && props.open !== null) {
        return makeControlledOpenProps(props);
    }
    var _a = react_2.useState(false), isOpen = _a[0], setIsOpenState = _a[1];
    // prettier-ignore
    var setIsOpen = react_2.useCallback(function (newIsOpen) {
        setIsOpenState(newIsOpen);
        return newIsOpen
            ? props.onOpen && props.onOpen()
            : props.onClose && props.onClose();
    }, [props]);
    return { isOpen: isOpen, setIsOpen: setIsOpen };
}
/* eslint-enable react-hooks/rules-of-hooks */
function usePickerState(props, options) {
    var utils = useUtils_1.useUtils();
    var _a = useOpenState(props), isOpen = _a.isOpen, setIsOpen = _a.setIsOpen;
    var _b = useDateValues(props, options), acceptedDateRef = _b.acceptedDateRef, date = _b.date, format = _b.format;
    if (!isOpen) {
        // if value was changed in closed state treat it as accepted
        acceptedDateRef.current = date;
    }
    var validationError = text_field_helper_1.validate(props.value, utils, props);
    react_2.useEffect(function () {
        if (validationError && props.onError) {
            props.onError(validationError, props.value);
        }
    }, [props, validationError]);
    var inputProps = react_1.useMemo(function () { return ({
        validationError: validationError,
        onClick: function () { return !props.disabled && setIsOpen(true); },
        inputValue: text_field_helper_1.getDisplayDate(acceptedDateRef.current, format, utils, props.value === null, props),
    }); }, [acceptedDateRef, format, props, setIsOpen, utils, validationError]);
    // prettier-ignore
    var acceptDate = react_2.useCallback(function (acceptedDate) {
        acceptedDateRef.current = acceptedDate;
        setIsOpen(false);
        props.onChange(acceptedDate);
        if (props.onAccept) {
            props.onAccept(acceptedDate);
        }
    }, [acceptedDateRef, setIsOpen, props]);
    var wrapperProps = react_1.useMemo(function () { return ({
        format: format,
        open: isOpen,
        onAccept: function () { return acceptDate(date); },
        onClear: function () { return acceptDate(null); },
        onSetToday: function () { return props.onChange(utils.date()); },
        onDismiss: function () {
            setIsOpen(false);
            props.onChange(acceptedDateRef.current);
        },
    }); }, [acceptDate, acceptedDateRef, date, format, isOpen, props, setIsOpen, utils]);
    var pickerProps = react_1.useMemo(function () { return ({
        date: date,
        onChange: function (newDate, isFinish) {
            if (isFinish === void 0) { isFinish = true; }
            props.onChange(newDate);
            if (isFinish && props.autoOk) {
                acceptDate(newDate);
            }
        },
    }); }, [acceptDate, date, props]);
    var pickerState = { pickerProps: pickerProps, inputProps: inputProps, wrapperProps: wrapperProps };
    react_2.useDebugValue(pickerState);
    return pickerState;
}
exports.usePickerState = usePickerState;
