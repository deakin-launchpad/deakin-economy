{"ast":null,"code":"var _jsxFileName = \"/Users/ikhowaja/Desktop/react-frontend-boilerplate/src/components/common/devModeSwitch.js\";\nimport React, { useContext } from 'react';\nimport { LoginContext } from 'contexts';\nimport { FormControlLabel, Switch, makeStyles } from '@material-ui/core';\nimport { DevModeConfig } from 'configurations';\nconst useStyles = makeStyles(theme => ({\n  '@global': {\n    body: {\n      backgroundColor: theme.palette.common.dark\n    }\n  },\n  devModeToggle: {\n    position: \"absolute\",\n    bottom: DevModeConfig.verticlePosition === \"top\" ? \"94vh\" : \"2vh\",\n    right: DevModeConfig.horizontalPosition === \"right\" ? \"1vw\" : \"64vw\"\n  }\n}));\nexport const DevModeSwitch = () => {\n  const classes = useStyles();\n\n  const _useContext = useContext(LoginContext),\n        devMode = _useContext.devMode,\n        setDevMode = _useContext.setDevMode;\n\n  const devModeStatusToggle = () => {\n    if (devMode) setDevMode(false);else setDevMode(true);\n  };\n\n  let content = React.createElement(FormControlLabel, {\n    className: classes.devModeToggle,\n    control: React.createElement(Switch, {\n      checked: Boolean(devMode),\n      value: Boolean(devMode),\n      onChange: () => {\n        devModeStatusToggle();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }),\n    label: DevModeConfig.label !== undefined ? DevModeConfig.label : \"God Mode\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  });\n  return content;\n};","map":{"version":3,"sources":["/Users/ikhowaja/Desktop/react-frontend-boilerplate/src/components/common/devModeSwitch.js"],"names":["React","useContext","LoginContext","FormControlLabel","Switch","makeStyles","DevModeConfig","useStyles","theme","body","backgroundColor","palette","common","dark","devModeToggle","position","bottom","verticlePosition","right","horizontalPosition","DevModeSwitch","classes","devMode","setDevMode","devModeStatusToggle","content","Boolean","label","undefined"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,YAAT,QAA6B,UAA7B;AACA,SAASC,gBAAT,EAA2BC,MAA3B,EAAmCC,UAAnC,QAAqD,mBAArD;AACA,SAASC,aAAT,QAA8B,gBAA9B;AAEA,MAAMC,SAAS,GAAGF,UAAU,CAACG,KAAK,KAAK;AACrC,aAAW;AACTC,IAAAA,IAAI,EAAE;AACJC,MAAAA,eAAe,EAAEF,KAAK,CAACG,OAAN,CAAcC,MAAd,CAAqBC;AADlC;AADG,GAD0B;AAMrCC,EAAAA,aAAa,EAAE;AACbC,IAAAA,QAAQ,EAAE,UADG;AAEbC,IAAAA,MAAM,EAAGV,aAAa,CAACW,gBAAd,KAAmC,KAAnC,GAA2C,MAA3C,GAAoD,KAFhD;AAGbC,IAAAA,KAAK,EAAGZ,aAAa,CAACa,kBAAd,KAAqC,OAArC,GAA+C,KAA/C,GAAuD;AAHlD;AANsB,CAAL,CAAN,CAA5B;AAaA,OAAO,MAAMC,aAAa,GAAG,MAAM;AACjC,QAAMC,OAAO,GAAGd,SAAS,EAAzB;;AADiC,sBAEDN,UAAU,CAACC,YAAD,CAFT;AAAA,QAEzBoB,OAFyB,eAEzBA,OAFyB;AAAA,QAEhBC,UAFgB,eAEhBA,UAFgB;;AAGjC,QAAMC,mBAAmB,GAAG,MAAM;AAChC,QAAIF,OAAJ,EACEC,UAAU,CAAC,KAAD,CAAV,CADF,KAGEA,UAAU,CAAC,IAAD,CAAV;AACH,GALD;;AAMA,MAAIE,OAAO,GACT,oBAAC,gBAAD;AAAkB,IAAA,SAAS,EAAEJ,OAAO,CAACP,aAArC;AACE,IAAA,OAAO,EACL,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAEY,OAAO,CAACJ,OAAD,CAAxB;AAAmC,MAAA,KAAK,EAAEI,OAAO,CAACJ,OAAD,CAAjD;AAA4D,MAAA,QAAQ,EAAE,MAAM;AAAEE,QAAAA,mBAAmB;AAAI,OAArG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ;AAGE,IAAA,KAAK,EAAGlB,aAAa,CAACqB,KAAd,KAAwBC,SAAxB,GAAoCtB,aAAa,CAACqB,KAAlD,GAA0D,UAHpE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAOA,SAAOF,OAAP;AACD,CAjBM","sourcesContent":["import React, { useContext } from 'react'\nimport { LoginContext } from 'contexts'\nimport { FormControlLabel, Switch, makeStyles } from '@material-ui/core'\nimport { DevModeConfig } from 'configurations'\n\nconst useStyles = makeStyles(theme => ({\n  '@global': {\n    body: {\n      backgroundColor: theme.palette.common.dark,\n    },\n  },\n  devModeToggle: {\n    position: \"absolute\",\n    bottom: (DevModeConfig.verticlePosition === \"top\" ? \"94vh\" : \"2vh\"),\n    right: (DevModeConfig.horizontalPosition === \"right\" ? \"1vw\" : \"64vw\")\n  }\n}));\n\nexport const DevModeSwitch = () => {\n  const classes = useStyles();\n  const { devMode, setDevMode } = useContext(LoginContext)\n  const devModeStatusToggle = () => {\n    if (devMode)\n      setDevMode(false)\n    else\n      setDevMode(true)\n  }\n  let content = (\n    <FormControlLabel className={classes.devModeToggle}\n      control={\n        <Switch checked={Boolean(devMode)} value={Boolean(devMode)} onChange={() => { devModeStatusToggle() }} />}\n      label={(DevModeConfig.label !== undefined ? DevModeConfig.label : \"God Mode\")}\n    />\n  )\n  return content;\n}\n"]},"metadata":{},"sourceType":"module"}