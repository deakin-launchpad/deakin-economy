{"ast":null,"code":"import { openDB, deleteDB, wrap, unwrap } from 'idb/with-async-ittr.js';\n\nvar CONFIG = require('./config.json');\n\nconst DBTitle = process.env.REACT_APP_IDB_DATABASE_NAME === undefined ? CONFIG.dbName ? CONFIG.dbName : 'defaultDB' : process.env.REACT_APP_IDB_DATABASE_NAME;\n\nclass IDBService {\n  async reset() {\n    return deleteDB(DBTitle);\n  }\n\n  async createGenericObject(objectStoreName, version, autoIncrementValue) {\n    var database = await openDB(DBTitle, version, {\n      upgrade(db) {\n        if (typeof objectStoreName === \"string\") {\n          if (!db.objectStoreNames.contains(objectStoreName)) db.createObjectStore(objectStoreName, {\n            keyPath: \"title\",\n            autoIncrement: autoIncrementValue\n          });\n        } else {\n          objectStoreName.forEach((value, i) => {\n            if (!db.objectStoreNames.contains(value)) db.createObjectStore(value, {\n              keyPath: \"title\",\n              autoIncrement: autoIncrementValue\n            });\n          });\n        }\n      }\n\n    });\n    return database;\n  }\n\n  async getAllFromStore(objectStoreName, cb) {\n    const db = await openDB(DBTitle);\n    const objects = await db.getAll(objectStoreName);\n    return cb(objects);\n  }\n\n  async checkIfDbStoreExists(objectStoreName) {\n    const db = await openDB(DBTitle);\n    if (!db.objectStoreNames.contains(objectStoreName)) return true;else return false;\n  }\n\n  async updateItemInStore(objectStoreName, keyname, data) {\n    const db = await openDB(DBTitle);\n    const tx = await db.transaction(objectStoreName, 'readwrite');\n    const store = await tx.objectStore(objectStoreName);\n    await store.put({\n      title: keyname,\n      data\n    });\n  }\n\n  async deleteItemFromStore(objectStoreName, keyname) {\n    const db = await openDB(DBTitle);\n    const tx = await db.transaction(objectStoreName, 'readwrite');\n    const store = await tx.objectStore(objectStoreName);\n    return await store.delete(keyname);\n  }\n\n  async IDBUnwrap(object) {\n    let newObject = unwrap(object);\n    return newObject;\n  }\n\n  async IDBWrap(object) {\n    let newObject = wrap(object);\n    return newObject;\n  }\n\n}\n\nconst instance = new IDBService();\nexport default instance;","map":{"version":3,"sources":["/Users/ikhowaja/Desktop/react-frontend-boilerplate/src/database/idb/service.js"],"names":["openDB","deleteDB","wrap","unwrap","CONFIG","require","DBTitle","process","env","REACT_APP_IDB_DATABASE_NAME","undefined","dbName","IDBService","reset","createGenericObject","objectStoreName","version","autoIncrementValue","database","upgrade","db","objectStoreNames","contains","createObjectStore","keyPath","autoIncrement","forEach","value","i","getAllFromStore","cb","objects","getAll","checkIfDbStoreExists","updateItemInStore","keyname","data","tx","transaction","store","objectStore","put","title","deleteItemFromStore","delete","IDBUnwrap","object","newObject","IDBWrap","instance"],"mappings":"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","sourcesContent":["import { openDB, deleteDB, wrap, unwrap } from 'idb/with-async-ittr.js';\nvar CONFIG = require('./config.json')\nconst DBTitle = (process.env.REACT_APP_IDB_DATABASE_NAME === undefined ?\n  (CONFIG.dbName ? CONFIG.dbName : 'defaultDB') : process.env.REACT_APP_IDB_DATABASE_NAME);\n\nclass IDBService {\n\n  async reset() {\n    return deleteDB(DBTitle);\n  }\n\n\n  async createGenericObject(objectStoreName, version, autoIncrementValue) {\n    var database = await openDB(DBTitle, version, {\n      upgrade(db) {\n        if (typeof objectStoreName === \"string\") {\n          if (!db.objectStoreNames.contains(objectStoreName))\n            db.createObjectStore(objectStoreName, { keyPath: \"title\", autoIncrement: autoIncrementValue });\n        } else {\n          objectStoreName.forEach((value, i) => {\n            if (!db.objectStoreNames.contains(value))\n              db.createObjectStore(value, { keyPath: \"title\", autoIncrement: autoIncrementValue });\n          })\n        }\n      }\n    })\n    return database\n  }\n\n\n  async getAllFromStore(objectStoreName, cb) {\n    const db = await openDB(DBTitle)\n    const objects = await db.getAll(objectStoreName)\n    return cb(objects)\n  }\n\n  async checkIfDbStoreExists(objectStoreName) {\n    const db = await openDB(DBTitle)\n    if (!db.objectStoreNames.contains(objectStoreName))\n      return true\n    else\n      return false\n  }\n\n  async updateItemInStore(objectStoreName, keyname, data) {\n    const db = await openDB(DBTitle)\n    const tx = await db.transaction(objectStoreName, 'readwrite')\n    const store = await tx.objectStore(objectStoreName)\n    await store.put({ title: keyname, data })\n  }\n\n  async deleteItemFromStore(objectStoreName, keyname) {\n    const db = await openDB(DBTitle)\n    const tx = await db.transaction(objectStoreName, 'readwrite')\n    const store = await tx.objectStore(objectStoreName)\n    return await store.delete(keyname)\n  }\n\n  async IDBUnwrap(object) {\n    let newObject = unwrap(object)\n    return newObject\n  }\n\n  async IDBWrap(object) {\n    let newObject = wrap(object)\n    return newObject\n  }\n\n}\n\nconst instance = new IDBService();\nexport default instance;\n\n"]},"metadata":{},"sourceType":"module"}